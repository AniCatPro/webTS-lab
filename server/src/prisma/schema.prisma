generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // или mysql, если у вас MySQL
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum FileKind {
  file
  folder
}

enum FileType {
  image
  video
  audio
  document
  other
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  role          Role     @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt  // ← ДОБАВЛЕН default(now())
  revisions     TextRevision[]
  auditLogs     AuditLog[] @relation("AuditActor")
  files         File[]       @relation("UserFiles")
  auditOwned    AuditLog[]   @relation("AuditOwner")
}

model File {
  id            String         @id @default(cuid())
  name          String
  kind          FileKind
  mimeType      String?
  type          FileType?
  parentId      String?
  parent        File?          @relation("FileChildren", fields: [parentId], references: [id])
  children      File[]         @relation("FileChildren")
  url           String?
  size          Int?
  createdAt     DateTime       @default(now())
  ownerId       String
  owner         User           @relation("UserFiles", fields: [ownerId], references: [id])
  updatedAt     DateTime       @updatedAt

  textRevisions TextRevision[]
  // связь с AuditLog как "цель"
  auditLogs     AuditLog[]     @relation("AuditTarget")

  @@index([parentId])
  @@index([type])
  @@index([ownerId, parentId])
  @@unique([ownerId, parentId, name, kind], map: "uniq_owner_parent_name_kind")
}

model TextRevision {
  id        String   @id @default(cuid())
  fileId    String
  file      File     @relation(fields: [fileId], references: [id])
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  content   String
  createdAt DateTime @default(now())
}

model AuditLog {
  id          String   @id @default(cuid())

  // тип события: 'file.create' | 'file.upload' | 'file.move' | 'file.delete' | 'file.text.update' | 'auth.login' | 'auth.logout' | 'user.create' ...
  type        String

  // актор события (пользователь)
  actorId     String?
  actor       User?    @relation("AuditActor", fields: [actorId], references: [id])

  // целевой объект (обычно File), делаем опциональным
  targetId    String?
  target      File?    @relation("AuditTarget", fields: [targetId], references: [id])

  // снапшоты на момент события
  targetType  String   // 'file' | 'folder' | 'user' | 'system'
  targetName  String?
  ownerId     String?
  owner       User?    @relation("AuditOwner", fields: [ownerId], references: [id])

  details     Json?
  createdAt   DateTime @default(now())

  @@index([createdAt])
  @@index([type])
  @@index([ownerId, createdAt])
}